/**
 * 8-bit Wallace tree multiplier circuit for unsigned integers, using carry save addition (CSA) based 3-to-2 reducers followed by 
 * CLA with higher-level propagate and generate terms
 */

CHIP Qa {
    
	//x is the multiplicand and y is the multiplier
	IN x[8], y[8];
	OUT P[8],OF;

    	PARTS:

	//Generating partial products
    	PPGenU(a=x,b=y[0],out=pp0);
    	PPGenU(a=x,b=y[1],out=pp1);
    	PPGenU(a=x,b=y[2],out=pp2);
    	PPGenU(a=x,b=y[3],out=pp3);
    	PPGenU(a=x,b=y[4],out=pp4);
    	PPGenU(a=x,b=y[5],out=pp5);
    	PPGenU(a=x,b=y[6],out=pp6);
    	PPGenU(a=x,b=y[7],out=pp7);    
    

    	//3-to-2 reduction in stages
	Reducer(x[0..7]=pp0,x[8..15]=false,y[0]=false,y[1..8]=pp1,y[9..15]=false,z[0..1]=false,z[2..9]=pp2,z[10..15]=false,sum=s10,carry=c10);
    	Reducer(x[0..2]=false,x[3..10]=pp3,x[11..15]=false,y[0..3]=false,y[4..11]=pp4,y[12..15]=false,z[0..4]=false,z[5..12]=pp5,z[13..15]=false,sum=s11,carry=c11);
    	Reducer(x=s10,y=c10,z=c11,sum=s20,carry=c20);
    	Reducer(x=s11,y[0..5]=false,y[6..13]=pp6,y[14..15]=false,z[0..6]=false,z[7..14]=pp7,z[15]=false,sum=s21,carry=c21);
    	Reducer(x=c20,y=s20,z=c21,sum=s30,carry=c30);
    	Reducer(x=c30,y=s30,z=s21,sum=s40,carry=c40);
   

    	//addition using CLA with high level propagate and generate terms
        Adder16(x=s40,y=c40,s[0..7]=P,s[8..15]=w0);


   	//Overflow indication
    	OverflowU(a=w0,out=OF);   
}