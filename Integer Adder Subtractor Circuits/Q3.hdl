/**
 * 4 bit CLA based 16-bit adder using higher-level propagate and generate terms
 */

CHIP Q3 {
    IN x[16], y[16], signed, AS;
    OUT s[16],OF;

    PARTS:
        
        Xor(a=AS, b=y[0], out=Y0);
	Xor(a=AS, b=y[1], out=Y1);
	Xor(a=AS, b=y[2], out=Y2);
	Xor(a=AS, b=y[3], out=Y3);
	Xor(a=AS, b=y[4], out=Y4);
	Xor(a=AS, b=y[5], out=Y5);
	Xor(a=AS, b=y[6], out=Y6);
	Xor(a=AS, b=y[7], out=Y7);
	Xor(a=AS, b=y[8], out=Y8);
	Xor(a=AS, b=y[9], out=Y9);
	Xor(a=AS, b=y[10], out=Y10);
	Xor(a=AS, b=y[11], out=Y11);
	Xor(a=AS, b=y[12], out=Y12);
	Xor(a=AS, b=y[13], out=Y13);
	Xor(a=AS, b=y[14], out=Y14);
	Xor(a=AS, b=y[15], out=Y15);

	CLA2(x=x[0..3],y[0]=Y0,y[1]=Y1,y[2]=Y2,y[3]=Y3,P=P0,G=G0);
	CLA2(x=x[4..7],y[0]=Y4,y[1]=Y5,y[2]=Y6,y[3]=Y7,P=P1,G=G1);
	CLA2(x=x[8..11],y[0]=Y8,y[1]=Y9,y[2]=Y10,y[3]=Y11,P=P2,G=G2);
	CLA2(x=x[12..15],y[0]=Y12,y[1]=Y13,y[2]=Y14,y[3]=Y15,P=P3,G=G3);

	And(a=P0, b=AS, out=t1);
	Or(a=t1, b=G0, out=c4);
	And3(a=P0, b=P1, c=AS, out=q1);
	And(a=P1, b=G0, out=q2);
	Or3(a=q1, b=q2, c=G1, out=c8);
	And4(a=P2, b=P1, c=P0, d=AS, out=w1);
	And3(a=P2, b=P1, c=G0, out=w2);
	And(a=P2, b=G1, out=w3);
	Or4(a=w1, b=w2, c=w3, d=G2, out=c12);
	And5(a=P3, b=P2, c=P1, d=P0, e=AS, out=m1);
	And4(a=P3, b=P2, c=P1, d=G0, out=m2);
	And3(a=P3, b=P2, c=G1, out=m3);
	And(a=P3, b=G2, out=m4);
	Or5(a=m1, b=m2, c=m3, d=m4, e=G3, out=c16);

	CLA2(x=x[0..3],y[0]=Y0,y[1]=Y1,y[2]=Y2,y[3]=Y3,c=AS,s=s[0..3]);
	CLA2(x=x[4..7],y[0]=Y4,y[1]=Y5,y[2]=Y6,y[3]=Y7,c=c4,s=s[4..7]);
	CLA2(x=x[8..11],y[0]=Y8,y[1]=Y9,y[2]=Y10,y[3]=Y11,c=c8,s=s[8..11]);
	CLA2(x=x[12..15],y[0]=Y12,y[1]=Y13,y[2]=Y14,y[3]=Y15,c=c12,cp=c15,s=s[12..15]);
        Not(in=AS,out=r1);
        And(a=c16,b=r1,out=Ofu);
        Xor(a=c15,b=c16,out=Ofs);
        Not(in=signed,out=r0);
        And(a=r0,b=Ofu,out=k1);
        And(a=signed,b=Ofs,out=k2);
        Or(a=k1,b=k2,out=OF);
}